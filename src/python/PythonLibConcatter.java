package python;

import java.awt.Color;
import javax.swing.BorderFactory;

/**
 * Python lib concatter utility class.
 *
 * @author Clemens Strobel
 * @date 2020/02/04
 */
public class PythonLibConcatter {
    
    private static int numberOfRowsAddedLast = 0;

    public static int getNumberOfRowsAddedLast() {
        return numberOfRowsAddedLast;
    }

    public static String addLibs(String pythonCode) {
        numberOfRowsAddedLast = 0;
        String jaPyGameLibImport = "import JaPyGame";
        if (pythonCode.contains(jaPyGameLibImport)) {
            pythonCode = getGameLib() + pythonCode.replace(jaPyGameLibImport, "");
            numberOfRowsAddedLast += getGameLib().length() - getGameLib().replace("\n", "").length();
        }
        String jaPyDialogImport = "import JaPyDialog";
        if (pythonCode.contains(jaPyDialogImport)) {
            pythonCode = getDialogLib() + pythonCode.replace(jaPyDialogImport, "");
            numberOfRowsAddedLast += getDialogLib().length() - getDialogLib().replace("\n", "").length();
        }
        return pythonCode;
    }

    private static String getGameLib() {
        return "from java.awt import Color\n"
                + "from java.awt import Font\n"
                + "from java.awt import Toolkit\n"
                + "from java.awt.event import ActionListener\n"
                + "from java.awt.event import KeyEvent\n"
                + "from java.awt.event import KeyListener\n"
                + "from java.awt.image import BufferedImage\n"
                + "from javax.swing import ImageIcon\n"
                + "from javax.swing import JPanel\n"
                + "from javax.swing import Timer\n"
                + "from java.awt import Dimension\n"
                + "from javax.swing import JFrame\n"
                + "from javax.swing import BorderFactory\n"
                + "\n"
                + "SIZE = 100\n"
                + "SPEED = 1000\n"
                + "ITERATION_COUNT = 0\n"
                + "GRAPHICS = None\n"
                + "PIXELS = []\n"
                + "\n"
                + "class Board(JPanel, KeyListener, ActionListener):\n"
                + "    game = None\n"
                + "    def __init__(self, game):\n"
                + "        super(Board, self).__init__()\n"
                + "        self.game = game\n"
                + "        self.initUI()\n"
                + "\n"
                + "    def initUI(self):\n"
                + "        self.setBackground(Color.black)\n"
                + "        self.setFocusable(True)\n"
                + "        self.addKeyListener(self)\n"
                + "\n"
                + "    def initGame(self):\n"
                + "        self.timer = Timer(max(1, int(10000 / SPEED)), self)\n"
                + "        self.timer.start()\n"
                + "\n"
                + "    def initOnce(self):\n"
                + "        self.game.initImpl()\n"
                + "\n"
                + "    def paint(self, g):\n"
                + "        global SIZE\n"
                + "        global GRAPHICS\n"
                + "        GRAPHICS = g\n"
                + "        # due to bug, cannot call super()\n"
                + "        JPanel.paint(self, g)\n"
                + "\n"
                + "        scalingFactor = int(5 * 100 / SIZE)\n"
                + "        for y in range(SIZE):\n"
                + "            for x in range(SIZE):\n"
                + "                g.setColor(PIXELS[x][y])\n"
                + "                g.fillRect(x * scalingFactor, y * scalingFactor , scalingFactor, scalingFactor)\n"
                + "\n"
                + "        Toolkit.getDefaultToolkit().sync()\n"
                + "        g.dispose()\n"
                + "\n"
                + "    def actionPerformed(self, e):\n"
                + "        global ITERATION_COUNT\n"
                + "        self.game.iterationImpl()\n"
                + "        ITERATION_COUNT += 1\n"
                + "        self.repaint()\n"
                + "\n"
                + "    def keyTyped(self, e):\n"
                + "        key = e.getKeyCode()\n"
                + "\n"
                + "    def keyReleased(self, e):\n"
                + "        key = e.getKeyCode()\n"
                + "\n"
                + "    def keyPressed(self, e):\n"
                + "        key = e.getKeyCode()\n"
                + "        \n"
                + "        if key == KeyEvent.VK_UP:\n"
                + "            self.game.upImpl()\n"
                + "            \n"
                + "        if key == KeyEvent.VK_LEFT:\n"
                + "            self.game.leftImpl()\n"
                + "            \n"
                + "        if key == KeyEvent.VK_RIGHT:\n"
                + "            self.game.rightImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_DOWN:\n"
                + "            self.game.downImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_SPACE:\n"
                + "            self.game.spaceImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_ENTER:\n"
                + "            self.game.enterImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_P:\n"
                + "            self.game.pImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_W:\n"
                + "            self.game.wImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_A:\n"
                + "            self.game.aImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_S:\n"
                + "            self.game.sImpl()\n"
                + "\n"
                + "        if key == KeyEvent.VK_D:\n"
                + "            self.game.dImpl()\n"
                + "\n"
                + "class JaPyGame(JFrame):\n"
                + "    upLock = False\n"
                + "    leftLock = False\n"
                + "    downLock = False\n"
                + "    rightLock = False\n"
                + "    spaceLock = False\n"
                + "    enterLock = False\n"
                + "    pLock = False\n"
                + "    wLock = False\n"
                + "    aLock = False\n"
                + "    sLock = False\n"
                + "    dLock = False\n"
                + "    \n"
                + "    def __init__(self, title):\n"
                + "        super(JaPyGame, self).__init__()\n"
                + "        self.clear()\n"
                + "        self.initUI(title)\n"
                + "        icon = BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE)\n"
                + "        self.setIconImage(icon)\n"
                + "\n"
                + "    def initUI(self, title):\n"
                + "        self.board = Board(self)\n"
                + "        scalingFactor = int(5 * 100 / SIZE)\n"
                + "        self.board.setPreferredSize(Dimension(SIZE * scalingFactor, SIZE * scalingFactor))\n"
                + "        panel = JPanel()\n"
                + "        panel.add(self.board)\n"
                + "        panel.setBorder(BorderFactory.createLineBorder(Color.blue, 1))\n"
                + "        panel.setBackground(Color.blue)\n"
                + "        self.add(panel)\n"
                + "        self.setTitle(title)\n"
                + "        self.setUndecorated(True)\n"
                + "        self.pack()\n"
                + "        self.setResizable(False)\n"
                + "        self.setLocationRelativeTo(None)\n"
                + "        self.setVisible(True)\n"
                + "        \n"
                + "    def clear(self):\n"
                + "        global PIXELS\n"
                + "        PIXELS = []\n"
                + "        for y in range(SIZE):\n"
                + "            tmpList = []\n"
                + "            for x in range(SIZE):\n"
                + "                tmpList.append(Color(0, 0, 0))\n"
                + "            PIXELS.append(tmpList)\n"
                + "        \n"
                + "    def initImpl(self):\n"
                + "        self.init()\n"
                + "        self.repaint()\n"
                + "        \n"
                + "    def iterationImpl(self):\n"
                + "        self.iterationLock = False\n"
                + "        self.upLock = False\n"
                + "        self.leftLock = False\n"
                + "        self.downLock = False\n"
                + "        self.rightLock = False\n"
                + "        self.spaceLock = False\n"
                + "        self.enterLock = False\n"
                + "        self.pLock = False\n"
                + "        self.wLock = False\n"
                + "        self.aLock = False\n"
                + "        self.sLock = False\n"
                + "        self.dLock = False\n"
                + "        self.iteration()\n"
                + "        \n"
                + "    def upImpl(self):\n"
                + "        if not self.upLock:\n"
                + "            self.upLock = True\n"
                + "            self.up()\n"
                + "        \n"
                + "    def leftImpl(self):\n"
                + "        if not self.leftLock:\n"
                + "            self.leftLock = True\n"
                + "            self.left()\n"
                + "        \n"
                + "    def downImpl(self):\n"
                + "        if not self.downLock:\n"
                + "            self.downLock = True\n"
                + "            self.down()\n"
                + "    \n"
                + "    def rightImpl(self):\n"
                + "        if not self.rightLock:\n"
                + "            self.rightLock = True\n"
                + "            self.right()\n"
                + "        \n"
                + "    def spaceImpl(self):\n"
                + "        if not self.spaceLock:\n"
                + "            self.spaceLock = True\n"
                + "            self.space()\n"
                + "        \n"
                + "    def enterImpl(self):\n"
                + "        if not self.enterLock:\n"
                + "            self.enterLock = True\n"
                + "            self.enter()\n"
                + "        \n"
                + "    def pImpl(self):\n"
                + "        if not self.pLock:\n"
                + "            self.pLock = True\n"
                + "            self.p()\n"
                + "        \n"
                + "    def wImpl(self):\n"
                + "        if not self.wLock:\n"
                + "            self.wLock = True\n"
                + "            self.w()\n"
                + "        \n"
                + "    def aImpl(self):\n"
                + "        if not self.aLock:\n"
                + "            self.aLock = True\n"
                + "            self.a()\n"
                + "        \n"
                + "    def sImpl(self):\n"
                + "        if not self.sLock:\n"
                + "            self.sLock = True\n"
                + "            self.s()\n"
                + "        \n"
                + "    def dImpl(self):\n"
                + "        if not self.dLock:\n"
                + "            self.dLock = True\n"
                + "            self.d()\n"
                + "        \n"
                + "    def init(self):\n"
                + "        print(\"Init not implemented yet!\")\n"
                + "        \n"
                + "    def iteration(self):\n"
                + "        pass\n"
                + "        \n"
                + "    def up(self):\n"
                + "        print(\"Up arrow key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def left(self):\n"
                + "        print(\"Left arrow key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def down(self):\n"
                + "        print(\"Down arrow key pressed not implemented yet!\")\n"
                + "    \n"
                + "    def right(self):\n"
                + "        print(\"Right arrow key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def space(self):\n"
                + "        print(\"Space bar pressed not implemented yet!\")\n"
                + "        \n"
                + "    def enter(self):\n"
                + "        print(\"Enter key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def p(self):\n"
                + "        print(\"P key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def w(self):\n"
                + "        print(\"W key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def a(self):\n"
                + "        print(\"A key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def s(self):\n"
                + "        print(\"S key pressed not implemented yet!\")\n"
                + "        \n"
                + "    def d(self):\n"
                + "        print(\"D key pressed not implemented yet!\")\n"
                + "\n";
    }

    private static String getDialogLib() {
        return "from java.awt import Color\n"
                + "from java.awt import Font\n"
                + "from java.awt import Toolkit\n"
                + "from java.awt.event import ActionListener\n"
                + "from java.awt.event import KeyEvent\n"
                + "from java.awt.event import KeyListener\n"
                + "from javax.swing import ImageIcon\n"
                + "from javax.swing import JPanel\n"
                + "from javax.swing import JLabel\n"
                + "from javax.swing import JButton\n"
                + "from javax.swing import Timer\n"
                + "from java.awt import Dimension\n"
                + "from javax.swing import JFrame\n"
                + "from javax.swing import BorderFactory\n"
                + "from javax.swing import JTextField\n"
                + "from java.awt import GridLayout\n"
                + "\n"
                + "TEXT_ENTERED = \"\"\n"
                + "\n"
                + "class JaPyDialog:\n"
                + "    def __init__(self, text):\n"
                + "        self.frame = JFrame(\"JaPyDialog\")\n"
                + "        self.frame.setSize(500, 300)\n"
                + "        self.frame.setUndecorated(True)\n"
                + "        panel = JPanel()\n"
                + "        panel.setLayout(GridLayout(4, 1))\n"
                + "        panel.setBorder(BorderFactory.createLineBorder(Color.blue, 3))\n"
                + "        label = JLabel(\"    \" + text)\n"
                + "        self.textField = JTextField()\n"
                + "        okButton = JButton('OK', actionPerformed=self.okClickedImpl)\n"
                + "        self.cancelButton = JButton('Cancel', actionPerformed=self.cancelClickedImpl)\n"
                + "        panel.add(label)\n"
                + "        panel.add(self.textField)\n"
                + "        panel.add(okButton)\n"
                + "        panel.add(self.cancelButton)\n"
                + "        self.frame.add(panel)\n"
                + "        self.frame.setResizable(False)\n"
                + "        self.frame.setLocationRelativeTo(None)\n"
                + "        self.frame.setVisible(True)\n"
                + "        \n"
                + "    def okClickedImpl(self, event):\n"
                + "        global TEXT_ENTERED\n"
                + "        TEXT_ENTERED = self.textField.getText()\n"
                + "        self.okClicked()\n"
                + "        self.frame.setVisible(False)\n"
                + "\n"
                + "    def cancelClickedImpl(self, event):\n"
                + "        self.cancelClicked()\n"
                + "        self.frame.setVisible(False)\n"
                + "\n"
                + "    def okClicked(self):\n"
                + "        pass\n"
                + "\n"
                + "    def cancelClicked(self):\n"
                + "        pass"
                + "\n"
                + "    def suppressTextField(self):\n"
                + "        self.textField.setVisible(False)"
                + "\n"
                + "    def suppressCancelButton(self):\n"
                + "        self.cancelButton.setVisible(False)"
                + "\n";
    }
}
